{
  "hash": "7cae4663a72a09baf2b561736f2df2d2",
  "result": {
    "engine": "knitr",
    "markdown": "# R setup {#sec-R_setup .unnumbered}\n\n## Getting started in R\n\nR is a statistical language and computing platform that is widely used in the sciences. It is free and open source. We will be using it extensively. There are many resources available, including:\n\n-   Your notes and course material from H1 Maths and Data Science (also on Brightspace \\> Practicals)\n-   Courses such as those from [Software Carpentry](https://swcarpentry.github.io/r-novice-gapminder/) or [Swirl](https://swirlstats.com/)\n-   Online videos such as [IQUIT R](https://www.youtube.com/playlist?list=PLo1ryuEXQ0sfGqV7MMwF9SiOuxW9hjZuc)\n\nUse these resources as needed to complement, revise, and reinforce the concepts you'll learn during this course.\n\nDuring the practicals, use 'copy-and-paste' thoughtfully. R is best learned through your fingers, and working through errors, though frustrating, is an essential skill.\n\n## RStudio Projects {#sec-RStudio_projects}\n\nWorking in a 'Project' within RStudio is the best way to avoid working directory complications. This is a very common source of frustration and errors. It also helps organize work to ensure that necessary scripts, documents, data, and output are all contained within the same folder. Other benefits include tracking your history of R commands and integrating cleanly with more sophisticated version control (e.g., git – more to come later).\n\n### Create an R Project\n\nWe will create an R Project for the semester. During each practical, you should work within this project. To set up a new project as we need it:\n\n1.  Sign into OneDrive, then open RStudio\n2.  Select *File \\> New Project...*\n3.  Choose *New Directory \\> New Project*\n4.  Set the *Directory name* as **H2_DataScience** and use the *Browse* button by *Create project as a subdirectory of:* to set a convenient location in your OneDrive folder. Click 'Create Project'.\n5.  In the *Files* panel in RStudio, click the *New Folder* button and create a folder called **data**.\n6.  On Brightspace, download the file in *Practicals \\> data* and move it into your newly created **data** folder.\n7.  On Brightspace, download the files in *Practicals \\> code* and move them into the **H2_DataScience** folder.\n8.  Close RStudio (to learn how to open appropriately)\n\n![Setting up a new RStudio project.](figs/RStudio_newProject.png){#fig-RStudioNewProject}\n\n![H2_DataScience directory structure.](figs/RStudio_projectFiles.png){#fig-RStudioDirectoryStructure}\n\nThe code in the practicals assumes this organization. If you choose to put your data files elsewhere, you will need to update the scripts accordingly. You're now prepared and organized for a semester in R!\n\n### Opening R\n\nWhen using a project, you should open R via the .proj file – *not* the script you plan to work on.\n\n::: callout-caution\nI repeat: **Open H2_DataScience.Rproj** instead of the .R or .qmd file you plan to work on!\n:::\n\nThis is the start-up process you should use for the practicals:\n\n1.  Open Windows Explorer (or Finder on Mac) and find your **H2_DataScience** folder.\n2.  [Double click on **H2_DataScience.Rproj**]{.underline}. This opens your R project with the working directory set to that folder. The working directory is shown at the top of the Console pane, and you can check it with `getwd()`. This is where R is 'situated' when loading or saving files.\n3.  In the *Files* panel, open the .qmd file for the week (or your .R file if you prefer).\n\n## RStudio Settings\n\nYou can adjust many settings in RStudio via Tools \\> Global options. In the Appearance tab in the popup box, you can set the theme (e.g., if you prefer a **dark theme**), font size, etc. The Code tab has many nice features as well (e.g., **rainbow parentheses** under Display).\n\n## R packages and libraries {#sec-R_packages}\n\nR packages are collections of functions, custom data structures, and datasets that are developed by the user base. A new installation of R includes many useful packages, visible on the 'Packages' tab in RStudio. There are many additional packages available from the official CRAN repository or less officially from GitHub. If you find yourself re-using custom functions across projects, you can even create your own personal package.\n\nTo install a package from CRAN, use the function `install.packages(\"packageName\")`. This downloads the package files to your computer. Each time you open R, you will need to load that package to use it with `library(packageName)`.\n\nInstalling from other package sources is slightly more complicated, so see me if you have a need.\n\nView an overview of a package with `?packageName`, and then see a list of all of the functions by scrolling to the bottom of the help page and clicking the \"index\" link.\n\nThe help for each function is available with `?functionName`, and you can see the underlying code by running `functionName` without parentheses.\n\n## R scripts (.R) vs Quarto documents (.qmd) {#sec-quarto}\n\nIn H1, you used R scripts (.R). These are just text files. The extension tells your computer to associate them with R, and also lets you run lines of code with 'ctrl + enter' and other convenient things in R and RStudio.\n\n[Quarto documents](https://quarto.org/docs/get-started/hello/rstudio.html) (.qmd) are also text files. However, RStudio interprets the text differently, allowing you to intersperse written prose, figures, references, R code, and output in a single document (similar to a jupyter notebook or a live script in Matlab). Code is marked as \"chunks\" and you can specify options for how the code and output are displayed. The text uses [markdown formatting](https://quarto.org/docs/authoring/markdown-basics.html), which allows all sorts of formatting (headers, bold, italic, equations, hyperlinks, tables, images...). RStudio can render a .qmd file into many other formats (e.g., pdf, docx, html, epub...).\n\nCode chunks can be added with the green button with a '(+)c' on the top right of a .qmd document in RStudio. Code chunks look like this:\n\n\n\n\n\n\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n# This is a code chunk\na <- 1:3\na\n```\n````\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\nRun the full block with the green 'play' button at the top right of the block. The output from the code is shown just below the block.\n\nFor code-heavy work, Quarto documents are a handy way to produce nicely formatted output without the hassle of copying and pasting code, output, and figures into, e.g., a word document. There are many [guides](https://quarto.org/docs/guide/) and [tutorials](https://quarto.org/docs/get-started/hello/rstudio.html) online.\n\nThis manual is written as a Quarto book. **Versions of the .qmd files for each practical are available on Brightspace** to make things easier for you. You should now have these downloaded and saved in your project directory.\n\nNote that the project will be submitted as a .qmd file with a version rendered to html.\n\n## Writing R code\n\nR has established best practices to make your meaning clear. Just like any language, you\\|can\\|write\\|with\\|your\\|own\\|system, but it's easier for everyone to use standard conventions. See the [full style guide](https://style.tidyverse.org/syntax.html) for more.\n\nA few key points:\n\n-   Use `<-` to *assign* a value to an object. You may see `=`, which works, but is not preferred.\n-   Use `#` to write a comment which R will ignore.\n-   Use spaces to make your code legible: `a <- c(1, 2, 3)`.\n-   Avoid spaces in column names or file names as these are a pain to work with.\n-   Use names for objects that are short, but descriptive.\n-   Limit the length of a line of code to about 80 characters.\n-   Usually, variables should be nouns and functions should be verbs.\n-   Run the line of code where your cursor is (or everything you've selected) with ctrl + enter\n",
    "supporting": [
      "P0_R_setup_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}