# Introduction {#intro .unnumbered}

## Practical sessions

In these practicals, you will apply concepts you learn throughout the H2 Data Science course. The questions you answer by hand are useful for learning and revision, while producing appropriate graphics and correctly describing results are essential parts of the scientific process. Expertise in these core skills is essential to do well in future courses and scientific projects. H2 Data Science is truly one of the most important courses you'll take!

You will use datasets provided on Brightspace, datasets included in R, and datasets you simulate yourself.

Please read through the practical before the class. Each session is scheduled for 3.5h with a break in the middle. You will work through a series of coding exercises and questions which are not assessed or marked, but may appear in the assessments. You should complete all the material in each practical.

Throughout the sessions, we will alternate between individual work and short re-caps as a class. If you find yourself racing ahead, all well and good. If you find yourself falling behind, then try some additional study ahead of the next session.

------------------------------------------------------------------------

## Getting started in R {#R_intro}

R is a statistical language and computing platform that is widely used in the sciences. It is free and open source. We will be using it extensively. There are many resources available, including:

-   Your notes and course material from H1 Maths and Data Science (also on Brightspace \> Practicals)
-   Courses such as those from [Software Carpentry](https://swcarpentry.github.io/r-novice-gapminder/) or [Swirl](https://swirlstats.com/)
-   Online videos such as IQUITR

You should access these resources in your own time to complement, revise, and reinforce the concepts you'll learn during this course.

During the practicals, use 'copy-and-paste' thoughtfully. R is best learned through your fingers, and working through errors, though frustrating, is an essential skill.

### RStudio Projects

Working in a 'Project' within RStudio is the best way to avoid working directory complications. This is a very common source of frustration and errors.

We will **create an R Project for the semester**:

1.  Sign into OneDrive, then open RStudio
2.  Select *File \> New Project...*
3.  Choose *New Directory \> New Project*
4.  Set the *Directory name* as **H2_DataScience** and use the *Browse* button by *Create project as a subdirectory of:* to set a convenient location in your OneDrive folder. Click 'Create Project'.
5.  In the *Files* panel in RStudio, click the *New Folder* button and create a folder called **data**.
6.  On Brightspace, download the files in *Practicals \> data* and move them into your newly created **data** folder.
7.  In the *Files* panel in RStudio, click the *New Folder* button and create a folder called **code**.
8.  On Brightspace, download the files in *Practicals \> code* and move them into the **H2_DataScience** folder.
9.  Close RStudio (to learn how to open appropriately)

You're now prepared and organized for a semester in R!

Next, let's go through the typical start-up process:

1.  Open Windows Explorer (or Finder on Mac) and find your **H2_DataScience** folder.
2.  [Double click on **H2_DataScience.Rproj**]{.underline}. This opens your R project with the working directory set to that folder. The working directory is shown at the top of the Console pane, and you can check it with `getwd()`. This is where R is 'situated' when loading or saving files.
3.  In the *Files* panel, open the .qmd file for the week.

At the start of each practical, repeat steps 2 and 3 for (hopefully) painless work in R.

The code in the practicals assumes this organization. If you choose to put your data files elsewhere, you will need to update the scripts accordingly.

### RStudio Settings

You can adjust many settings in RStudio via Tools \> Global options. In the Appearance tab in the popup box, you can set the theme (e.g., if you prefer a **dark theme**), font size, etc. The Code tab has many nice features as well (e.g., **rainbow parentheses** under Display).

### R packages and libraries

R packages are collections of functions, custom data structures, and datasets that are developed by the user base. A new installation of R includes many useful default packages, visible on the 'Packages' tab in RStudio. There are many additional packages available from the official CRAN repository or less officially from GitHub. If you find yourself re-using custom functions across projects, you can even create your own personal package.

To install a package from CRAN, use the function `install.packages("packageName")`. This downloads the package files to your computer. Each time you open R, you will need to load that package to use it with `library(packageName)`.

Installing from other package sources is slightly more complicated, so see me if you have a need.

You can get an overview of a package with `?packageName`, and then see a list of all of the functions by scrolling to the bottom of the help page and clicking the "index" link.

The help for each function is available with `?functionName`, and you can see the underlying code with `functionName` without parentheses.

### R scripts (.R) vs Quarto documents (.qmd)

In H1, you used R scripts (.R). These are just text files. The extension tells your computer to associate them with R, and also lets you run lines of code with 'ctrl + enter' and other convenient things in R and RStudio.

Quarto documents (.qmd) are also text files. However, RStudio interprets the text differently, allowing you to intersperse written prose, R code, and output in a single document (similar to a jupyter notebook or a live script in Matlab). Code is marked as "chunks" and you can specify options for how the code and output are displayed. The text uses markdown formatting, which allows all sorts of formatting (headers, bold, italic, equations, hyperlinks, tables, images...). RStudio can render a .qmd file into many other formats (e.g., pdf, docx, html, epub...).

Code chunks can be added with the green button with a 'c' on the top right of a .qmd document in RStudio. They look like this:

```{r}
#| echo: fenced

# This is a code chunk
a <- 1:3
a
```

The output from the code is shown just below the block.

For code-heavy work, Quarto documents are a handy way to produce nicely formatted output without the hassle of copying and pasting code, output, and figures into, e.g., a word document. There are many [guides](https://quarto.org/docs/guide/) and [tutorials](https://quarto.org/docs/get-started/hello/rstudio.html) online.

In fact, this manual is written as a Quarto book. **Versions of the .qmd files for each practical are available on Brightspace** to make things easier for you. Note that the project will be submitted as a .qmd file.

### Writing R code

R has established best practices to make your meaning clear. Just like any language, you\|can\|write\|with\|your\|own\|system, but it's easier for everyone to use standard conventions. See the [full style guide](https://style.tidyverse.org/syntax.html) for more.

A few key points:

-   Use `<-` to *assign* a value to an object. You may see `=`, which works, but is not preferred.
-   Use spaces to make your code legible: `a <- c(1, 2, 3)`.
-   Avoid spaces in column names or file names as these are a pain to work with.
-   Use names for objects that are short, but descriptive.
-   Limit the length of a line of code to about 80 characters.
-   Usually, variables should be nouns and functions should be verbs.
-   Use `#` to write a comment which R will ignore.
-   Run the line of code where your cursor is (or everything you've selected) with ctrl + enter
